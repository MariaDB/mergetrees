/*****************************************************************************

Copyright (c) 2016, Percona Inc. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA

*****************************************************************************/

/**************************************************//**
@file include/buf0dblwr.ic
Inline definitions for the doublewrite buffer

*******************************************************/


/** Return the number of partitions in the parallel doublewrite buffer
@return number of parallel doublewrite partitions */
MY_ATTRIBUTE((warn_unused_result))
UNIV_INLINE
ulint
buf_parallel_dblwr_shard_num(void)
{
	compile_time_assert(BUF_FLUSH_LIST < 2);
	compile_time_assert(BUF_FLUSH_LRU < 2);
	return 2 * srv_buf_pool_instances;
}

/** Return the doublewrite partition number for a given buffer pool and flush
type.
@return the doublewrite partition number */
MY_ATTRIBUTE((warn_unused_result))
UNIV_INLINE
ulint
buf_parallel_dblwr_partition(ulint instance_no, buf_flush_t flush_type)
{
	ut_ad(flush_type == BUF_FLUSH_LIST || flush_type == BUF_FLUSH_LRU);
	ut_ad(instance_no < srv_buf_pool_instances);
	ulint result = instance_no * 2 + flush_type;
	ut_ad(result < buf_parallel_dblwr_shard_num());
	return(result);
}

/** Return the doublewrite partition number for a given buffer page and flush
type.
@return the doublewrite partition number */
MY_ATTRIBUTE((warn_unused_result))
UNIV_INLINE
ulint
buf_parallel_dblwr_partition(const buf_page_t* bpage, buf_flush_t flush_type)
{
	return(buf_parallel_dblwr_partition(bpage->buf_pool_index,
					    flush_type));
}

/** Return the doublewrite partition number for a given buffer pool and flush
type.
@return the doublewrite partition number */
MY_ATTRIBUTE((warn_unused_result))
UNIV_INLINE
ulint
buf_parallel_dblwr_partition(const buf_pool_t* buf_pool,
			     buf_flush_t flush_type)
{
	return(buf_parallel_dblwr_partition(buf_pool->instance_no, flush_type));
}
